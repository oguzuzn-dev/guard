worker_processes auto;
events {
    worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    
    # shared dict for tokens and rate limiting
    lua_shared_dict waf_tokens 10m;
    lua_shared_dict waf_limits 10m;
    lua_shared_dict waf_keys 1m;
    
    # load crypto keys 
    init_worker_by_lua_block {
        require("browser_check").init_keys()
    }
    
    server {
        listen 80;
        server_name _;
        
        # security headers
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-Frame-Options "DENY" always;
        
        # waf check
        location / {
            access_by_lua_block {
                local waf = require("browser_check")
                waf.check_request()
            }
            
            # app backend
            proxy_pass http://127.0.0.1:8080;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }
        
        # challenge endpoint
        location = /waf/challenge {
            content_by_lua_block {
                local waf = require("browser_check")
                waf.serve_challenge()
            }
        }
        
        # verification endpoint
        location = /waf/verify {
            content_by_lua_block {
                local waf = require("browser_check")
                waf.verify_challenge()
            }
        }
        
        # CAPTCHA endpoint 
        location = /waf/captcha {
            content_by_lua_block {
                local waf = require("browser_check")
                waf.serve_captcha()
            }
        }
        
        # CAPTCHA verification endpoint
        location = /waf/verify-captcha {
            content_by_lua_block {
                local waf = require("browser_check")
                waf.verify_captcha()
            }
        }
        
        # health check
        location = /health {
            access_log off;
            return 200 "OK";
        }
    }
}
